// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YouSMBServiceClient is the client API for YouSMBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YouSMBServiceClient interface {
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigReply, error)
	AddFolderConfig(ctx context.Context, in *AddConfigMessage, opts ...grpc.CallOption) (*BaseReply, error)
	UpdateFolderConfig(ctx context.Context, in *AddConfigMessage, opts ...grpc.CallOption) (*BaseReply, error)
	RemoveFolderConfig(ctx context.Context, in *RemoveConfigMessage, opts ...grpc.CallOption) (*BaseReply, error)
	AddUser(ctx context.Context, in *AddUserMessage, opts ...grpc.CallOption) (*BaseReply, error)
	RemoveUser(ctx context.Context, in *RemoveUserMessage, opts ...grpc.CallOption) (*BaseReply, error)
	GetSMBStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMBStatusReply, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfoReply, error)
}

type youSMBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYouSMBServiceClient(cc grpc.ClientConnInterface) YouSMBServiceClient {
	return &youSMBServiceClient{cc}
}

func (c *youSMBServiceClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) AddFolderConfig(ctx context.Context, in *AddConfigMessage, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/AddFolderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) UpdateFolderConfig(ctx context.Context, in *AddConfigMessage, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/UpdateFolderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) RemoveFolderConfig(ctx context.Context, in *RemoveConfigMessage, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/RemoveFolderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) AddUser(ctx context.Context, in *AddUserMessage, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) RemoveUser(ctx context.Context, in *RemoveUserMessage, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) GetSMBStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMBStatusReply, error) {
	out := new(SMBStatusReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/GetSMBStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youSMBServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfoReply, error) {
	out := new(ServiceInfoReply)
	err := c.cc.Invoke(ctx, "/yousmb.YouSMBService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YouSMBServiceServer is the server API for YouSMBService service.
// All implementations must embed UnimplementedYouSMBServiceServer
// for forward compatibility
type YouSMBServiceServer interface {
	GetConfig(context.Context, *Empty) (*ConfigReply, error)
	AddFolderConfig(context.Context, *AddConfigMessage) (*BaseReply, error)
	UpdateFolderConfig(context.Context, *AddConfigMessage) (*BaseReply, error)
	RemoveFolderConfig(context.Context, *RemoveConfigMessage) (*BaseReply, error)
	AddUser(context.Context, *AddUserMessage) (*BaseReply, error)
	RemoveUser(context.Context, *RemoveUserMessage) (*BaseReply, error)
	GetSMBStatus(context.Context, *Empty) (*SMBStatusReply, error)
	GetInfo(context.Context, *Empty) (*ServiceInfoReply, error)
	mustEmbedUnimplementedYouSMBServiceServer()
}

// UnimplementedYouSMBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYouSMBServiceServer struct {
}

func (UnimplementedYouSMBServiceServer) GetConfig(context.Context, *Empty) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedYouSMBServiceServer) AddFolderConfig(context.Context, *AddConfigMessage) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolderConfig not implemented")
}
func (UnimplementedYouSMBServiceServer) UpdateFolderConfig(context.Context, *AddConfigMessage) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolderConfig not implemented")
}
func (UnimplementedYouSMBServiceServer) RemoveFolderConfig(context.Context, *RemoveConfigMessage) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFolderConfig not implemented")
}
func (UnimplementedYouSMBServiceServer) AddUser(context.Context, *AddUserMessage) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedYouSMBServiceServer) RemoveUser(context.Context, *RemoveUserMessage) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedYouSMBServiceServer) GetSMBStatus(context.Context, *Empty) (*SMBStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMBStatus not implemented")
}
func (UnimplementedYouSMBServiceServer) GetInfo(context.Context, *Empty) (*ServiceInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedYouSMBServiceServer) mustEmbedUnimplementedYouSMBServiceServer() {}

// UnsafeYouSMBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YouSMBServiceServer will
// result in compilation errors.
type UnsafeYouSMBServiceServer interface {
	mustEmbedUnimplementedYouSMBServiceServer()
}

func RegisterYouSMBServiceServer(s grpc.ServiceRegistrar, srv YouSMBServiceServer) {
	s.RegisterService(&YouSMBService_ServiceDesc, srv)
}

func _YouSMBService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_AddFolderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).AddFolderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/AddFolderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).AddFolderConfig(ctx, req.(*AddConfigMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_UpdateFolderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).UpdateFolderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/UpdateFolderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).UpdateFolderConfig(ctx, req.(*AddConfigMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_RemoveFolderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConfigMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).RemoveFolderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/RemoveFolderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).RemoveFolderConfig(ctx, req.(*RemoveConfigMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).AddUser(ctx, req.(*AddUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).RemoveUser(ctx, req.(*RemoveUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_GetSMBStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).GetSMBStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/GetSMBStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).GetSMBStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouSMBService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouSMBServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yousmb.YouSMBService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouSMBServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// YouSMBService_ServiceDesc is the grpc.ServiceDesc for YouSMBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YouSMBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yousmb.YouSMBService",
	HandlerType: (*YouSMBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _YouSMBService_GetConfig_Handler,
		},
		{
			MethodName: "AddFolderConfig",
			Handler:    _YouSMBService_AddFolderConfig_Handler,
		},
		{
			MethodName: "UpdateFolderConfig",
			Handler:    _YouSMBService_UpdateFolderConfig_Handler,
		},
		{
			MethodName: "RemoveFolderConfig",
			Handler:    _YouSMBService_RemoveFolderConfig_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _YouSMBService_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _YouSMBService_RemoveUser_Handler,
		},
		{
			MethodName: "GetSMBStatus",
			Handler:    _YouSMBService_GetSMBStatus_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _YouSMBService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yousmb_service.proto",
}
