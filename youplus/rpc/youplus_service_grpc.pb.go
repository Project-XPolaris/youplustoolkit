// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YouPlusServiceClient is the client API for YouPlusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YouPlusServiceClient interface {
	CheckDataset(ctx context.Context, in *CheckDatasetRequest, opts ...grpc.CallOption) (*CheckDatasetReply, error)
	GetDatasetInfo(ctx context.Context, in *GetDatasetInfoRequest, opts ...grpc.CallOption) (*GetDatasetInfoReply, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*ActionReply, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*ActionReply, error)
	RollbackDataset(ctx context.Context, in *RollbackDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error)
	RegisterEntry(ctx context.Context, in *RegisterEntryRequest, opts ...grpc.CallOption) (*ActionReply, error)
	UnregisterEntry(ctx context.Context, in *UnregisterEntryRequest, opts ...grpc.CallOption) (*ActionReply, error)
	UpdateEntryExport(ctx context.Context, in *UpdateEntryExportRequest, opts ...grpc.CallOption) (*ActionReply, error)
	EntryHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*ActionReply, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenReply, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error)
}

type youPlusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYouPlusServiceClient(cc grpc.ClientConnInterface) YouPlusServiceClient {
	return &youPlusServiceClient{cc}
}

func (c *youPlusServiceClient) CheckDataset(ctx context.Context, in *CheckDatasetRequest, opts ...grpc.CallOption) (*CheckDatasetReply, error) {
	out := new(CheckDatasetReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/CheckDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) GetDatasetInfo(ctx context.Context, in *GetDatasetInfoRequest, opts ...grpc.CallOption) (*GetDatasetInfoReply, error) {
	out := new(GetDatasetInfoReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/GetDatasetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/DeleteSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) RollbackDataset(ctx context.Context, in *RollbackDatasetRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/RollbackDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) RegisterEntry(ctx context.Context, in *RegisterEntryRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/RegisterEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) UnregisterEntry(ctx context.Context, in *UnregisterEntryRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/UnregisterEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) UpdateEntryExport(ctx context.Context, in *UpdateEntryExportRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/UpdateEntryExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) EntryHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/EntryHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenReply, error) {
	out := new(GenerateTokenReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youPlusServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error) {
	out := new(CheckTokenReply)
	err := c.cc.Invoke(ctx, "/youplus.YouPlusService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YouPlusServiceServer is the server API for YouPlusService service.
// All implementations must embed UnimplementedYouPlusServiceServer
// for forward compatibility
type YouPlusServiceServer interface {
	CheckDataset(context.Context, *CheckDatasetRequest) (*CheckDatasetReply, error)
	GetDatasetInfo(context.Context, *GetDatasetInfoRequest) (*GetDatasetInfoReply, error)
	CreateDataset(context.Context, *CreateDatasetRequest) (*ActionReply, error)
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*ActionReply, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*ActionReply, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*ActionReply, error)
	RollbackDataset(context.Context, *RollbackDatasetRequest) (*ActionReply, error)
	RegisterEntry(context.Context, *RegisterEntryRequest) (*ActionReply, error)
	UnregisterEntry(context.Context, *UnregisterEntryRequest) (*ActionReply, error)
	UpdateEntryExport(context.Context, *UpdateEntryExportRequest) (*ActionReply, error)
	EntryHeartbeat(context.Context, *HeartbeatRequest) (*ActionReply, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenReply, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error)
	mustEmbedUnimplementedYouPlusServiceServer()
}

// UnimplementedYouPlusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYouPlusServiceServer struct {
}

func (UnimplementedYouPlusServiceServer) CheckDataset(context.Context, *CheckDatasetRequest) (*CheckDatasetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDataset not implemented")
}
func (UnimplementedYouPlusServiceServer) GetDatasetInfo(context.Context, *GetDatasetInfoRequest) (*GetDatasetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetInfo not implemented")
}
func (UnimplementedYouPlusServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedYouPlusServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedYouPlusServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedYouPlusServiceServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedYouPlusServiceServer) RollbackDataset(context.Context, *RollbackDatasetRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDataset not implemented")
}
func (UnimplementedYouPlusServiceServer) RegisterEntry(context.Context, *RegisterEntryRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEntry not implemented")
}
func (UnimplementedYouPlusServiceServer) UnregisterEntry(context.Context, *UnregisterEntryRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterEntry not implemented")
}
func (UnimplementedYouPlusServiceServer) UpdateEntryExport(context.Context, *UpdateEntryExportRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntryExport not implemented")
}
func (UnimplementedYouPlusServiceServer) EntryHeartbeat(context.Context, *HeartbeatRequest) (*ActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntryHeartbeat not implemented")
}
func (UnimplementedYouPlusServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedYouPlusServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedYouPlusServiceServer) mustEmbedUnimplementedYouPlusServiceServer() {}

// UnsafeYouPlusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YouPlusServiceServer will
// result in compilation errors.
type UnsafeYouPlusServiceServer interface {
	mustEmbedUnimplementedYouPlusServiceServer()
}

func RegisterYouPlusServiceServer(s grpc.ServiceRegistrar, srv YouPlusServiceServer) {
	s.RegisterService(&YouPlusService_ServiceDesc, srv)
}

func _YouPlusService_CheckDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).CheckDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/CheckDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).CheckDataset(ctx, req.(*CheckDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_GetDatasetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).GetDatasetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/GetDatasetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).GetDatasetInfo(ctx, req.(*GetDatasetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_RollbackDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).RollbackDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/RollbackDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).RollbackDataset(ctx, req.(*RollbackDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_RegisterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).RegisterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/RegisterEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).RegisterEntry(ctx, req.(*RegisterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_UnregisterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).UnregisterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/UnregisterEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).UnregisterEntry(ctx, req.(*UnregisterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_UpdateEntryExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).UpdateEntryExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/UpdateEntryExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).UpdateEntryExport(ctx, req.(*UpdateEntryExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_EntryHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).EntryHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/EntryHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).EntryHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouPlusService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouPlusServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/youplus.YouPlusService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouPlusServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YouPlusService_ServiceDesc is the grpc.ServiceDesc for YouPlusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YouPlusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "youplus.YouPlusService",
	HandlerType: (*YouPlusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDataset",
			Handler:    _YouPlusService_CheckDataset_Handler,
		},
		{
			MethodName: "GetDatasetInfo",
			Handler:    _YouPlusService_GetDatasetInfo_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _YouPlusService_CreateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _YouPlusService_DeleteDataset_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _YouPlusService_CreateSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _YouPlusService_DeleteSnapshot_Handler,
		},
		{
			MethodName: "RollbackDataset",
			Handler:    _YouPlusService_RollbackDataset_Handler,
		},
		{
			MethodName: "RegisterEntry",
			Handler:    _YouPlusService_RegisterEntry_Handler,
		},
		{
			MethodName: "UnregisterEntry",
			Handler:    _YouPlusService_UnregisterEntry_Handler,
		},
		{
			MethodName: "UpdateEntryExport",
			Handler:    _YouPlusService_UpdateEntryExport_Handler,
		},
		{
			MethodName: "EntryHeartbeat",
			Handler:    _YouPlusService_EntryHeartbeat_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _YouPlusService_GenerateToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _YouPlusService_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "youplus_service.proto",
}
